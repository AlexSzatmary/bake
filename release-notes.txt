0.2.3 More useful .args

* The parsing of .arg files is different, so text in a .arg is read just as if
  it were typed in at the command line. This makes it possible to make execute
  (-e) commands like, -e 'echo foo bar', making it easier to save tricky -e's
  as .arg files.

* Several execute (-e) commands can be stacked, previously, each would replace
  the previous one. Previously, one would have to do,

    -e 'command1; command2; command3'

  now,

    -e 'command1' -e 'command2' -e 'command3'

  is equivalent to this. So, series of complicated commands can be saved in
  several .arg files, and composed like

    bake -f bp/foo.bp -m +command1.arg +command2.arg +command3.arg

Also, bp files can now have blank lines; these are ignored. This improves
readabilty for bp files.



0.2.2 Records of runs

New feature: with --grid_manifest, the grid is saved, in bp format, with an
automatically generated, time- and date-stamped filename. Also, with
--job_manifest, each job has a single bp file made in its directory that would
recreate the job.

0.2.1 Bugfix: path for bake in myBake in examples/poisson

0.2.0 Sensible use of arguments! Saner internals!

Things that this breaks:

* bake.cfg is dead. Long live bake.arg! Converting from bake.cfg to bake.arg
  should be easy; a good example of bake.arg is in examples/poisson.

* Custom cmdline.py front-ends break again. This should be easy to fix. Compare
  with `examples/poisson/myBake/cmdline.py`. In short, do a find-and-replace on
  optparse to argparse, options to args, and change

    options, arguments = optparser.parse_args()

  to

    args = argparser.parse_args(argv)

  The new sample cmdline.py in myBake is about 14 lines shorter than the 0.1.0
  version.

New feature:

* bake.cfg is gone. Now, all options can be set at the command line, or,
  equivalently, in bake.arg in the project directory. See Configuration in the
  README.

0.1.0 No new files needed! include statements!

Things that this breaks:

* bake.cfg files have a new format. The one in example/cookie is a good
  example. This is described in the README.

* Custom cmdline.py bake front-ends break because of the substantial changes to
  the api. The cmdline.py in `examples/poisson/myBake` is a good example. This
  is a good change; the new cmdline.py in this example is about 10 lines
  shorter than in the 0.0.0 release.

New features:

* No files are needed to make a project use bake. Just do `mkdir batch`;
  everything else can be specified with command line flags. Currently, the
  minimal use for bake is, 1. install bake, 2. in any directory, do

    mkdir batch; bake -l -o '@foo@;bar;baz'

  outputting,

    foobar
    foobaz

* bp files now can have include statements. If a bp file has the line,
  `include(foo.bp)`, Bake replaces that line with the text of `foo.bp`. This is
  most useful for having a default configuration, and then bp files that refine
  that for specific cases. One can even have hierarchies with a specific case
  file including parameters for a project, which includes default values for
  the whole code.

* Automatic testing. Both unit tests and end-to-end tests are set up in an
  organized way. These should make it clear that Bake continues to behave as
  expected as new features are added. Some of this was in the 0.0.0 release,
  but this is now systematized. See testing.txt for information.

0.0.2 Bugfix: Cookie test code
0.0.1 Bugfix: Restore \n removal from end of bp line
0.0.0 Initial release
